// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ad HTTP client CLI support package
//
// Command:
// $ goa gen github.com/Frank0945/advertise/api/design -o api

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	adc "github.com/Frank0945/advertise/api/gen/http/ad/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `ad (create|list)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` ad create --body '{
      "Country": "TW",
      "age_end": 60,
      "age_start": 18,
      "end_at": "2024-10-01 00:00:00",
      "gender": "M",
      "platform": "ios",
      "start_at": "2024-01-01 00:00:00",
      "title": "AD 1"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		adFlags = flag.NewFlagSet("ad", flag.ContinueOnError)

		adCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		adCreateBodyFlag = adCreateFlags.String("body", "REQUIRED", "")

		adListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		adListBodyFlag = adListFlags.String("body", "REQUIRED", "")
	)
	adFlags.Usage = adUsage
	adCreateFlags.Usage = adCreateUsage
	adListFlags.Usage = adListUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "ad":
			svcf = adFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "ad":
			switch epn {
			case "create":
				epf = adCreateFlags

			case "list":
				epf = adListFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "ad":
			c := adc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = adc.BuildCreatePayload(*adCreateBodyFlag)
			case "list":
				endpoint = c.List()
				data, err = adc.BuildListPayload(*adListBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// adUsage displays the usage of the ad command and its subcommands.
func adUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ad service interface.
Usage:
    %[1]s [globalflags] ad COMMAND [flags]

COMMAND:
    create: Create a new edge
    list: List all ADs by filter

Additional help:
    %[1]s ad COMMAND --help
`, os.Args[0])
}
func adCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ad create -body JSON

Create a new edge
    -body JSON: 

Example:
    %[1]s ad create --body '{
      "Country": "TW",
      "age_end": 60,
      "age_start": 18,
      "end_at": "2024-10-01 00:00:00",
      "gender": "M",
      "platform": "ios",
      "start_at": "2024-01-01 00:00:00",
      "title": "AD 1"
   }'
`, os.Args[0])
}

func adListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ad list -body JSON

List all ADs by filter
    -body JSON: 

Example:
    %[1]s ad list --body '{
      "Country": "TW",
      "age_end": 60,
      "age_start": 18,
      "gender": "M",
      "limit": 10,
      "offset": 0,
      "platform": "ios"
   }'
`, os.Args[0])
}
