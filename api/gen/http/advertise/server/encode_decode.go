// Code generated by goa v3.15.2, DO NOT EDIT.
//
// advertise HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/Frank0945/go-advertise/api/design -o api

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	advertise "github.com/Frank0945/go-advertise/api/gen/advertise"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateAdResponse returns an encoder for responses returned by the
// advertise create_ad endpoint.
func EncodeCreateAdResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*advertise.CreateAdResult)
		enc := encoder(ctx, w)
		body := NewCreateAdResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateAdRequest returns a decoder for requests sent to the advertise
// create_ad endpoint.
func DecodeCreateAdRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateAdRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateAdRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateAdPayload(&body)

		return payload, nil
	}
}

// EncodeListAdsResponse returns an encoder for responses returned by the
// advertise list_ads endpoint.
func EncodeListAdsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*advertise.Ad)
		enc := encoder(ctx, w)
		body := NewListAdsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListAdsRequest returns a decoder for requests sent to the advertise
// list_ads endpoint.
func DecodeListAdsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			offset   int
			limit    int
			ageStart *int
			ageEnd   *int
			gender   *string
			country  *string
			platform *string
			err      error
		)
		{
			offsetRaw := r.URL.Query().Get("offset")
			if offsetRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("offset", "query string"))
			}
			v, err2 := strconv.ParseInt(offsetRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("offset", offsetRaw, "integer"))
			}
			offset = int(v)
		}
		if offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
		}
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("limit", "query string"))
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		if limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
		}
		{
			ageStartRaw := r.URL.Query().Get("age_start")
			if ageStartRaw != "" {
				v, err2 := strconv.ParseInt(ageStartRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("age_start", ageStartRaw, "integer"))
				}
				pv := int(v)
				ageStart = &pv
			}
		}
		if ageStart != nil {
			if *ageStart < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_start", *ageStart, 1, true))
			}
		}
		if ageStart != nil {
			if *ageStart > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_start", *ageStart, 100, false))
			}
		}
		{
			ageEndRaw := r.URL.Query().Get("age_end")
			if ageEndRaw != "" {
				v, err2 := strconv.ParseInt(ageEndRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("age_end", ageEndRaw, "integer"))
				}
				pv := int(v)
				ageEnd = &pv
			}
		}
		if ageEnd != nil {
			if *ageEnd < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_end", *ageEnd, 1, true))
			}
		}
		if ageEnd != nil {
			if *ageEnd > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_end", *ageEnd, 100, false))
			}
		}
		genderRaw := r.URL.Query().Get("gender")
		if genderRaw != "" {
			gender = &genderRaw
		}
		if gender != nil {
			if !(*gender == "M" || *gender == "F") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("gender", *gender, []any{"M", "F"}))
			}
		}
		countryRaw := r.URL.Query().Get("country")
		if countryRaw != "" {
			country = &countryRaw
		}
		if country != nil {
			if !(*country == "TW" || *country == "JP") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("country", *country, []any{"TW", "JP"}))
			}
		}
		platformRaw := r.URL.Query().Get("platform")
		if platformRaw != "" {
			platform = &platformRaw
		}
		if platform != nil {
			if !(*platform == "ios" || *platform == "android" || *platform == "web") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("platform", *platform, []any{"ios", "android", "web"}))
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListAdsAdOverview(offset, limit, ageStart, ageEnd, gender, country, platform)

		return payload, nil
	}
}

// marshalAdvertiseAdToAdResponse builds a value of type *AdResponse from a
// value of type *advertise.Ad.
func marshalAdvertiseAdToAdResponse(v *advertise.Ad) *AdResponse {
	res := &AdResponse{
		Title: v.Title,
		EndAt: v.EndAt,
	}

	return res
}
