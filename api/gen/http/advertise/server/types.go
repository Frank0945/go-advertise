// Code generated by goa v3.15.2, DO NOT EDIT.
//
// advertise HTTP server types
//
// Command:
// $ goa gen github.com/Frank0945/go-advertise/api/design -o api

package server

import (
	advertise "github.com/Frank0945/go-advertise/api/gen/advertise"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "advertise" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Title of AD
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Start time of AD
	StartAt *string `form:"start_at,omitempty" json:"start_at,omitempty" xml:"start_at,omitempty"`
	// End time of AD
	EndAt      *string `form:"end_at,omitempty" json:"end_at,omitempty" xml:"end_at,omitempty"`
	Conditions *struct {
		// Start age of target
		AgeStart *int `form:"age_start" json:"age_start" xml:"age_start"`
		// End age of target
		AgeEnd *int `form:"age_end" json:"age_end" xml:"age_end"`
		// Gender of target
		Gender *string `form:"gender" json:"gender" xml:"gender"`
		// Country of target
		Country *string `form:"country" json:"country" xml:"country"`
		// Platform of target
		Platform *string `form:"platform" json:"platform" xml:"platform"`
	} `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// ListResponseBody is the type of the "advertise" service "list" endpoint HTTP
// response body.
type ListResponseBody []*AdsResponse

// AdsResponse is used to define fields on response body types.
type AdsResponse struct {
	// Title of AD
	Title string `form:"title" json:"title" xml:"title"`
	// End time of AD
	EndAt string `form:"end_at" json:"end_at" xml:"end_at"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "advertise" service.
func NewListResponseBody(res []*advertise.Ads) ListResponseBody {
	body := make([]*AdsResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdvertiseAdsToAdsResponse(val)
	}
	return body
}

// NewCreatePayload builds a advertise service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *advertise.CreatePayload {
	v := &advertise.CreatePayload{
		Title:   *body.Title,
		StartAt: *body.StartAt,
		EndAt:   *body.EndAt,
	}
	if body.Conditions != nil {
		v.Conditions = &struct {
			// Start age of target
			AgeStart *int
			// End age of target
			AgeEnd *int
			// Gender of target
			Gender *string
			// Country of target
			Country *string
			// Platform of target
			Platform *string
		}{
			AgeStart: body.Conditions.AgeStart,
			AgeEnd:   body.Conditions.AgeEnd,
			Gender:   body.Conditions.Gender,
			Country:  body.Conditions.Country,
			Platform: body.Conditions.Platform,
		}
	}

	return v
}

// NewListAdList builds a advertise service list endpoint payload.
func NewListAdList(offset int, limit int, ageStart *int, ageEnd *int, gender *string, country *string, platform *string) *advertise.AdList {
	v := &advertise.AdList{}
	v.Offset = offset
	v.Limit = limit
	v.AgeStart = ageStart
	v.AgeEnd = ageEnd
	v.Gender = gender
	v.Country = country
	v.Platform = platform

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.StartAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_at", "body"))
	}
	if body.EndAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_at", "body"))
	}
	if body.StartAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_at", *body.StartAt, goa.FormatDateTime))
	}
	if body.EndAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_at", *body.EndAt, goa.FormatDateTime))
	}
	if body.Conditions != nil {
		if body.Conditions.AgeStart != nil {
			if *body.Conditions.AgeStart < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_start", *body.Conditions.AgeStart, 1, true))
			}
		}
		if body.Conditions.AgeEnd != nil {
			if *body.Conditions.AgeEnd > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_end", *body.Conditions.AgeEnd, 100, false))
			}
		}
		if body.Conditions.Gender != nil {
			if !(*body.Conditions.Gender == "M" || *body.Conditions.Gender == "F") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.conditions.gender", *body.Conditions.Gender, []any{"M", "F"}))
			}
		}
		if body.Conditions.Country != nil {
			if !(*body.Conditions.Country == "TW" || *body.Conditions.Country == "JP") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.conditions.country", *body.Conditions.Country, []any{"TW", "JP"}))
			}
		}
		if body.Conditions.Platform != nil {
			if !(*body.Conditions.Platform == "ios" || *body.Conditions.Platform == "android" || *body.Conditions.Platform == "web") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.conditions.platform", *body.Conditions.Platform, []any{"ios", "android", "web"}))
			}
		}
	}
	return
}
