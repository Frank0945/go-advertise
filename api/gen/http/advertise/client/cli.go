// Code generated by goa v3.15.2, DO NOT EDIT.
//
// advertise HTTP client CLI support package
//
// Command:
// $ goa gen github.com/Frank0945/go-advertise/api/design -o api

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	advertise "github.com/Frank0945/go-advertise/api/gen/advertise"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateAdPayload builds the payload for the advertise create_ad endpoint
// from CLI flags.
func BuildCreateAdPayload(advertiseCreateAdBody string) (*advertise.CreateAdPayload, error) {
	var err error
	var body CreateAdRequestBody
	{
		err = json.Unmarshal([]byte(advertiseCreateAdBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"conditions\": {\n         \"age_end\": 60,\n         \"age_start\": 18,\n         \"country\": \"TW\",\n         \"gender\": \"M\",\n         \"platform\": \"ios\"\n      },\n      \"end_at\": \"2024-12-10T03:00:00.000Z\",\n      \"start_at\": \"2024-03-10T03:00:00.000Z\",\n      \"title\": \"AD 1\"\n   }'")
		}
		if utf8.RuneCountInString(body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 1, true))
		}
		if utf8.RuneCountInString(body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 100, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_at", body.StartAt, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_at", body.EndAt, goa.FormatDateTime))
		if body.Conditions != nil {
			if body.Conditions.AgeStart != nil {
				if *body.Conditions.AgeStart < 1 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_start", *body.Conditions.AgeStart, 1, true))
				}
			}
			if body.Conditions.AgeStart != nil {
				if *body.Conditions.AgeStart > 100 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_start", *body.Conditions.AgeStart, 100, false))
				}
			}
			if body.Conditions.AgeEnd != nil {
				if *body.Conditions.AgeEnd < 1 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_end", *body.Conditions.AgeEnd, 1, true))
				}
			}
			if body.Conditions.AgeEnd != nil {
				if *body.Conditions.AgeEnd > 100 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_end", *body.Conditions.AgeEnd, 100, false))
				}
			}
			if body.Conditions.Gender != nil {
				if !(*body.Conditions.Gender == "M" || *body.Conditions.Gender == "F") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.conditions.gender", *body.Conditions.Gender, []any{"M", "F"}))
				}
			}
			if body.Conditions.Country != nil {
				if !(*body.Conditions.Country == "TW" || *body.Conditions.Country == "JP") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.conditions.country", *body.Conditions.Country, []any{"TW", "JP"}))
				}
			}
			if body.Conditions.Platform != nil {
				if !(*body.Conditions.Platform == "ios" || *body.Conditions.Platform == "android" || *body.Conditions.Platform == "web") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.conditions.platform", *body.Conditions.Platform, []any{"ios", "android", "web"}))
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &advertise.CreateAdPayload{
		Title:   body.Title,
		StartAt: body.StartAt,
		EndAt:   body.EndAt,
	}
	if body.Conditions != nil {
		v.Conditions = &struct {
			// Start age of target
			AgeStart *int
			// End age of target
			AgeEnd *int
			// Gender of target
			Gender *string
			// Country of target
			Country *string
			// Platform of target
			Platform *string
		}{
			AgeStart: body.Conditions.AgeStart,
			AgeEnd:   body.Conditions.AgeEnd,
			Gender:   body.Conditions.Gender,
			Country:  body.Conditions.Country,
			Platform: body.Conditions.Platform,
		}
	}

	return v, nil
}

// BuildListAdsPayload builds the payload for the advertise list_ads endpoint
// from CLI flags.
func BuildListAdsPayload(advertiseListAdsOffset string, advertiseListAdsLimit string, advertiseListAdsAgeStart string, advertiseListAdsAgeEnd string, advertiseListAdsGender string, advertiseListAdsCountry string, advertiseListAdsPlatform string) (*advertise.AdOverview, error) {
	var err error
	var offset int
	{
		var v int64
		v, err = strconv.ParseInt(advertiseListAdsOffset, 10, strconv.IntSize)
		offset = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for offset, must be INT")
		}
		if offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var limit int
	{
		var v int64
		v, err = strconv.ParseInt(advertiseListAdsLimit, 10, strconv.IntSize)
		limit = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for limit, must be INT")
		}
		if limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var ageStart *int
	{
		if advertiseListAdsAgeStart != "" {
			var v int64
			v, err = strconv.ParseInt(advertiseListAdsAgeStart, 10, strconv.IntSize)
			val := int(v)
			ageStart = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for ageStart, must be INT")
			}
			if *ageStart < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_start", *ageStart, 1, true))
			}
			if *ageStart > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_start", *ageStart, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var ageEnd *int
	{
		if advertiseListAdsAgeEnd != "" {
			var v int64
			v, err = strconv.ParseInt(advertiseListAdsAgeEnd, 10, strconv.IntSize)
			val := int(v)
			ageEnd = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for ageEnd, must be INT")
			}
			if *ageEnd < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_end", *ageEnd, 1, true))
			}
			if *ageEnd > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_end", *ageEnd, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var gender *string
	{
		if advertiseListAdsGender != "" {
			gender = &advertiseListAdsGender
			if !(*gender == "M" || *gender == "F") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("gender", *gender, []any{"M", "F"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var country *string
	{
		if advertiseListAdsCountry != "" {
			country = &advertiseListAdsCountry
			if !(*country == "TW" || *country == "JP") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("country", *country, []any{"TW", "JP"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var platform *string
	{
		if advertiseListAdsPlatform != "" {
			platform = &advertiseListAdsPlatform
			if !(*platform == "ios" || *platform == "android" || *platform == "web") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("platform", *platform, []any{"ios", "android", "web"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &advertise.AdOverview{}
	v.Offset = offset
	v.Limit = limit
	v.AgeStart = ageStart
	v.AgeEnd = ageEnd
	v.Gender = gender
	v.Country = country
	v.Platform = platform

	return v, nil
}
