// Code generated by goa v3.15.2, DO NOT EDIT.
//
// advertise HTTP client types
//
// Command:
// $ goa gen github.com/Frank0945/go-advertise/api/design -o api

package client

import (
	"unicode/utf8"

	advertise "github.com/Frank0945/go-advertise/api/gen/advertise"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "advertise" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Title of AD
	Title string `form:"title" json:"title" xml:"title"`
	// Start time of AD
	StartAt string `form:"start_at" json:"start_at" xml:"start_at"`
	// End time of AD
	EndAt      string `form:"end_at" json:"end_at" xml:"end_at"`
	Conditions *struct {
		// Start age of target
		AgeStart *int `form:"age_start" json:"age_start" xml:"age_start"`
		// End age of target
		AgeEnd *int `form:"age_end" json:"age_end" xml:"age_end"`
		// Gender of target
		Gender *string `form:"gender" json:"gender" xml:"gender"`
		// Country of target
		Country *string `form:"country" json:"country" xml:"country"`
		// Platform of target
		Platform *string `form:"platform" json:"platform" xml:"platform"`
	} `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// ListResponseBody is the type of the "advertise" service "list" endpoint HTTP
// response body.
type ListResponseBody []*AdsResponse

// AdsResponse is used to define fields on response body types.
type AdsResponse struct {
	// Title of AD
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// End time of AD
	EndAt *string `form:"end_at,omitempty" json:"end_at,omitempty" xml:"end_at,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "advertise" service.
func NewCreateRequestBody(p *advertise.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Title:   p.Title,
		StartAt: p.StartAt,
		EndAt:   p.EndAt,
	}
	if p.Conditions != nil {
		body.Conditions = &struct {
			// Start age of target
			AgeStart *int `form:"age_start" json:"age_start" xml:"age_start"`
			// End age of target
			AgeEnd *int `form:"age_end" json:"age_end" xml:"age_end"`
			// Gender of target
			Gender *string `form:"gender" json:"gender" xml:"gender"`
			// Country of target
			Country *string `form:"country" json:"country" xml:"country"`
			// Platform of target
			Platform *string `form:"platform" json:"platform" xml:"platform"`
		}{
			AgeStart: p.Conditions.AgeStart,
			AgeEnd:   p.Conditions.AgeEnd,
			Gender:   p.Conditions.Gender,
			Country:  p.Conditions.Country,
			Platform: p.Conditions.Platform,
		}
	}
	return body
}

// NewListAdsOK builds a "advertise" service "list" endpoint result from a HTTP
// "OK" response.
func NewListAdsOK(body []*AdsResponse) []*advertise.Ads {
	v := make([]*advertise.Ads, len(body))
	for i, val := range body {
		v[i] = unmarshalAdsResponseToAdvertiseAds(val)
	}

	return v
}

// ValidateAdsResponse runs the validations defined on AdsResponse
func ValidateAdsResponse(body *AdsResponse) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.EndAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_at", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.EndAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_at", *body.EndAt, goa.FormatDateTime))
	}
	return
}
