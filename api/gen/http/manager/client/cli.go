// Code generated by goa v3.15.2, DO NOT EDIT.
//
// manager HTTP client CLI support package
//
// Command:
// $ goa gen github.com/Frank0945/go-advertise/api/design -o api

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	manager "github.com/Frank0945/go-advertise/api/gen/manager"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateAdPayload builds the payload for the manager create_ad endpoint
// from CLI flags.
func BuildCreateAdPayload(managerCreateAdBody string) (*manager.CreateAdPayload, error) {
	var err error
	var body CreateAdRequestBody
	{
		err = json.Unmarshal([]byte(managerCreateAdBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"conditions\": {\n         \"age_end\": 60,\n         \"age_start\": 18,\n         \"country\": [\n            \"TW\",\n            \"JP\"\n         ],\n         \"gender\": [\n            \"M\",\n            \"F\"\n         ],\n         \"platform\": [\n            \"ios\",\n            \"android\",\n            \"web\"\n         ]\n      },\n      \"end_at\": \"2024-12-10T03:00:00.000Z\",\n      \"start_at\": \"2024-03-10T03:00:00.000Z\",\n      \"title\": \"AD 1\"\n   }'")
		}
		if utf8.RuneCountInString(body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 1, true))
		}
		if utf8.RuneCountInString(body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 100, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_at", body.StartAt, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_at", body.EndAt, goa.FormatDateTime))
		if body.Conditions != nil {
			if body.Conditions.AgeStart != nil {
				if *body.Conditions.AgeStart < 1 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_start", *body.Conditions.AgeStart, 1, true))
				}
			}
			if body.Conditions.AgeStart != nil {
				if *body.Conditions.AgeStart > 100 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_start", *body.Conditions.AgeStart, 100, false))
				}
			}
			if body.Conditions.AgeEnd != nil {
				if *body.Conditions.AgeEnd < 1 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_end", *body.Conditions.AgeEnd, 1, true))
				}
			}
			if body.Conditions.AgeEnd != nil {
				if *body.Conditions.AgeEnd > 100 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_end", *body.Conditions.AgeEnd, 100, false))
				}
			}
			for _, e := range body.Conditions.Gender {
				err = goa.MergeErrors(err, goa.ValidatePattern("body.conditions.gender[*]", e, "M|F"))
			}
			for _, e := range body.Conditions.Country {
				err = goa.MergeErrors(err, goa.ValidatePattern("body.conditions.country[*]", e, "TW|JP"))
			}
			for _, e := range body.Conditions.Platform {
				err = goa.MergeErrors(err, goa.ValidatePattern("body.conditions.platform[*]", e, "ios|android|web"))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &manager.CreateAdPayload{
		Title:   body.Title,
		StartAt: body.StartAt,
		EndAt:   body.EndAt,
	}
	if body.Conditions != nil {
		v.Conditions = &struct {
			// Start age of target
			AgeStart *int
			// End age of target
			AgeEnd *int
			// Gender of target
			Gender []string
			// Country of target
			Country []string
			// Platform of target
			Platform []string
		}{
			AgeStart: body.Conditions.AgeStart,
			AgeEnd:   body.Conditions.AgeEnd,
		}
		if body.Conditions.Gender != nil {
			v.Conditions.Gender = make([]string, len(body.Conditions.Gender))
			for i, val := range body.Conditions.Gender {
				v.Conditions.Gender[i] = val
			}
		}
		if body.Conditions.Country != nil {
			v.Conditions.Country = make([]string, len(body.Conditions.Country))
			for i, val := range body.Conditions.Country {
				v.Conditions.Country[i] = val
			}
		}
		if body.Conditions.Platform != nil {
			v.Conditions.Platform = make([]string, len(body.Conditions.Platform))
			for i, val := range body.Conditions.Platform {
				v.Conditions.Platform[i] = val
			}
		}
	}

	return v, nil
}

// BuildListAdsPayload builds the payload for the manager list_ads endpoint
// from CLI flags.
func BuildListAdsPayload(managerListAdsOffset string, managerListAdsLimit string, managerListAdsAgeStart string, managerListAdsAgeEnd string, managerListAdsGender string, managerListAdsCountry string, managerListAdsPlatform string) (*manager.AdQuery, error) {
	var err error
	var offset int
	{
		var v int64
		v, err = strconv.ParseInt(managerListAdsOffset, 10, strconv.IntSize)
		offset = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for offset, must be INT")
		}
		if offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var limit int
	{
		var v int64
		v, err = strconv.ParseInt(managerListAdsLimit, 10, strconv.IntSize)
		limit = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for limit, must be INT")
		}
		if limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var ageStart *int
	{
		if managerListAdsAgeStart != "" {
			var v int64
			v, err = strconv.ParseInt(managerListAdsAgeStart, 10, strconv.IntSize)
			val := int(v)
			ageStart = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for ageStart, must be INT")
			}
			if *ageStart < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_start", *ageStart, 1, true))
			}
			if *ageStart > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_start", *ageStart, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var ageEnd *int
	{
		if managerListAdsAgeEnd != "" {
			var v int64
			v, err = strconv.ParseInt(managerListAdsAgeEnd, 10, strconv.IntSize)
			val := int(v)
			ageEnd = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for ageEnd, must be INT")
			}
			if *ageEnd < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_end", *ageEnd, 1, true))
			}
			if *ageEnd > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("age_end", *ageEnd, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var gender []string
	{
		if managerListAdsGender != "" {
			err = json.Unmarshal([]byte(managerListAdsGender), &gender)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for gender, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"M\",\n      \"F\"\n   ]'")
			}
			for _, e := range gender {
				err = goa.MergeErrors(err, goa.ValidatePattern("gender[*]", e, "M|F"))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var country []string
	{
		if managerListAdsCountry != "" {
			err = json.Unmarshal([]byte(managerListAdsCountry), &country)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for country, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"TW\",\n      \"JP\"\n   ]'")
			}
			for _, e := range country {
				err = goa.MergeErrors(err, goa.ValidatePattern("country[*]", e, "TW|JP"))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var platform []string
	{
		if managerListAdsPlatform != "" {
			err = json.Unmarshal([]byte(managerListAdsPlatform), &platform)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for platform, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"ios\",\n      \"android\",\n      \"web\"\n   ]'")
			}
			for _, e := range platform {
				err = goa.MergeErrors(err, goa.ValidatePattern("platform[*]", e, "ios|android|web"))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &manager.AdQuery{}
	v.Offset = offset
	v.Limit = limit
	v.AgeStart = ageStart
	v.AgeEnd = ageEnd
	v.Gender = gender
	v.Country = country
	v.Platform = platform

	return v, nil
}
