// Code generated by goa v3.15.2, DO NOT EDIT.
//
// manager HTTP server types
//
// Command:
// $ goa gen github.com/Frank0945/go-advertise/api/design -o api

package server

import (
	"unicode/utf8"

	manager "github.com/Frank0945/go-advertise/api/gen/manager"
	goa "goa.design/goa/v3/pkg"
)

// CreateAdRequestBody is the type of the "manager" service "create_ad"
// endpoint HTTP request body.
type CreateAdRequestBody struct {
	// Title of AD
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Start time of AD
	StartAt *string `form:"start_at,omitempty" json:"start_at,omitempty" xml:"start_at,omitempty"`
	// End time of AD
	EndAt      *string `form:"end_at,omitempty" json:"end_at,omitempty" xml:"end_at,omitempty"`
	Conditions *struct {
		// Start age of target
		AgeStart *int `form:"age_start" json:"age_start" xml:"age_start"`
		// End age of target
		AgeEnd *int `form:"age_end" json:"age_end" xml:"age_end"`
		// Gender of target
		Gender []string `form:"gender" json:"gender" xml:"gender"`
		// Country of target
		Country []string `form:"country" json:"country" xml:"country"`
		// Platform of target
		Platform []string `form:"platform" json:"platform" xml:"platform"`
	} `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// CreateAdResponseBody is the type of the "manager" service "create_ad"
// endpoint HTTP response body.
type CreateAdResponseBody struct {
	// ID of the AD
	ID string `form:"id" json:"id" xml:"id"`
}

// ListAdsResponseBody is the type of the "manager" service "list_ads" endpoint
// HTTP response body.
type ListAdsResponseBody []*AdResponse

// AdResponse is used to define fields on response body types.
type AdResponse struct {
	// Title of AD
	Title string `form:"title" json:"title" xml:"title"`
	// End time of AD
	EndAt string `form:"end_at" json:"end_at" xml:"end_at"`
}

// NewCreateAdResponseBody builds the HTTP response body from the result of the
// "create_ad" endpoint of the "manager" service.
func NewCreateAdResponseBody(res *manager.CreateAdResult) *CreateAdResponseBody {
	body := &CreateAdResponseBody{
		ID: res.ID,
	}
	return body
}

// NewListAdsResponseBody builds the HTTP response body from the result of the
// "list_ads" endpoint of the "manager" service.
func NewListAdsResponseBody(res []*manager.Ad) ListAdsResponseBody {
	body := make([]*AdResponse, len(res))
	for i, val := range res {
		body[i] = marshalManagerAdToAdResponse(val)
	}
	return body
}

// NewCreateAdPayload builds a manager service create_ad endpoint payload.
func NewCreateAdPayload(body *CreateAdRequestBody) *manager.CreateAdPayload {
	v := &manager.CreateAdPayload{
		Title:   *body.Title,
		StartAt: *body.StartAt,
		EndAt:   *body.EndAt,
	}
	if body.Conditions != nil {
		v.Conditions = &struct {
			// Start age of target
			AgeStart *int
			// End age of target
			AgeEnd *int
			// Gender of target
			Gender []string
			// Country of target
			Country []string
			// Platform of target
			Platform []string
		}{
			AgeStart: body.Conditions.AgeStart,
			AgeEnd:   body.Conditions.AgeEnd,
		}
		if body.Conditions.Gender != nil {
			v.Conditions.Gender = make([]string, len(body.Conditions.Gender))
			for i, val := range body.Conditions.Gender {
				v.Conditions.Gender[i] = val
			}
		}
		if body.Conditions.Country != nil {
			v.Conditions.Country = make([]string, len(body.Conditions.Country))
			for i, val := range body.Conditions.Country {
				v.Conditions.Country[i] = val
			}
		}
		if body.Conditions.Platform != nil {
			v.Conditions.Platform = make([]string, len(body.Conditions.Platform))
			for i, val := range body.Conditions.Platform {
				v.Conditions.Platform[i] = val
			}
		}
	}

	return v
}

// NewListAdsAdQuery builds a manager service list_ads endpoint payload.
func NewListAdsAdQuery(offset int, limit int, ageStart *int, ageEnd *int, gender []string, country []string, platform []string) *manager.AdQuery {
	v := &manager.AdQuery{}
	v.Offset = offset
	v.Limit = limit
	v.AgeStart = ageStart
	v.AgeEnd = ageEnd
	v.Gender = gender
	v.Country = country
	v.Platform = platform

	return v
}

// ValidateCreateAdRequestBody runs the validations defined on
// create_ad_request_body
func ValidateCreateAdRequestBody(body *CreateAdRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.StartAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_at", "body"))
	}
	if body.EndAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_at", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.StartAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_at", *body.StartAt, goa.FormatDateTime))
	}
	if body.EndAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_at", *body.EndAt, goa.FormatDateTime))
	}
	if body.Conditions != nil {
		if body.Conditions.AgeStart != nil {
			if *body.Conditions.AgeStart < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_start", *body.Conditions.AgeStart, 1, true))
			}
		}
		if body.Conditions.AgeStart != nil {
			if *body.Conditions.AgeStart > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_start", *body.Conditions.AgeStart, 100, false))
			}
		}
		if body.Conditions.AgeEnd != nil {
			if *body.Conditions.AgeEnd < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_end", *body.Conditions.AgeEnd, 1, true))
			}
		}
		if body.Conditions.AgeEnd != nil {
			if *body.Conditions.AgeEnd > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.conditions.age_end", *body.Conditions.AgeEnd, 100, false))
			}
		}
		for _, e := range body.Conditions.Gender {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.conditions.gender[*]", e, "M|F"))
		}
		for _, e := range body.Conditions.Country {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.conditions.country[*]", e, "TW|JP"))
		}
		for _, e := range body.Conditions.Platform {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.conditions.platform[*]", e, "ios|android|web"))
		}
	}
	return
}
